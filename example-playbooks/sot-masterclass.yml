#!/usr/bin/env ansible-playbook
---

- name: Deploy a cloud instance
  hosts: localhost
  vars:
    # EDIT THE FOLLOWING VARIABLES
    key_name: yourname-first-instance-key
    instance_name: yourname-first-instance
    security_group_name: yourname-first-instance-sg
    local_public_html_dir: /home/don/workdir/hugo/foobar/public/ # Note training slash is important
    # NO CHANGES REGIRED AFTER THIS

    # Required variables
    # change if required or override at runtime using --extra-vars
    ssh_public_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    ssh_private_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
    # Attributes used for launching the compute instance (required)
    # dig lookup requires dnspython
    ssh_remote_cidr: "{{ lookup('dig', 'myip.opendns.com', '@resolver1.opendns.com') + '/32' | default('0.0.0.0/0', true) }}"
    web_remote_cidr: 0.0.0.0/0
    image: ubuntu-16.04-x86_64
    private_net: private-net
    flavor: c1.c1r1

  tasks:
    - name: Connect to the Catalyst Cloud
      os_auth:

    - name: "Create the {{ security_group_name }} security group"
      os_security_group:
        state: present
        name: "{{ security_group_name }}"
        description: Network access for SoT Masterclass instance.

    - name: Create a security group rule for SSH access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ ssh_remote_cidr }}"

    - name: Create a security group rule for HTTP access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        remote_ip_prefix: "{{ web_remote_cidr }}"

    - name: Import an SSH keypair
      os_keypair:
        state: present
        name: "{{ key_name }}"
        public_key_file: "{{ ssh_public_key }}"

    - name: Create a compute instance
      os_server:
        state: present
        name: "{{ instance_name }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ private_net }}"
        security_groups: "default,{{ security_group_name }}"

    - name: Assign a floating IP
      os_floating_ip:
        server: "{{ instance_name }}"
      register: floating_ip_info

    - name: Output floating IP
      debug:
        var: floating_ip_info.floating_ip.floating_ip_address

    - name: Wait for SSH to come up on analytics instance
      wait_for:
        host: "{{ floating_ip_info.floating_ip.floating_ip_address }}"
        port: 22

    - name: Install python-minimal on backend host (retry 3 times)
      command: "ssh -o StrictHostKeyChecking=no -o IdentityFile={{ ssh_private_key }} ubuntu@{{ floating_ip_info.floating_ip.floating_ip_address }} sudo apt-get update && sudo apt-get -y install python-minimal"
      register: task_result
      until: task_result.rc == 0
      retries: 3
      delay: 1
      ignore_errors: yes

    - add_host:
        name: "{{ floating_ip_info.floating_ip.floating_ip_address }}"
        groups: webserver
        ansible_user: ubuntu
        local_public_html_dir: "{{ local_public_html_dir }}"

    - name: Remove floating ip from known hosts
      known_hosts:
        name: "{{ floating_ip_info.floating_ip.floating_ip_address }}"
        state: absent

- name: Configure the webserver
  hosts: webserver
  become: yes
  become_method: sudo
  gather_facts: false

  tasks:

    - name: Install nginx web server
      apt:
        pkg: nginx
        state: installed
        update_cache: true
      notify:
        - Start nginx

    - meta: flush_handlers

    - name: Copy the public directory
      copy:
        src: "{{ local_public_html_dir }}"
        dest: /var/www/html
        owner: root
        group: root

  handlers:
    - name: Start nginx
      service:
        name: nginx
        state: started

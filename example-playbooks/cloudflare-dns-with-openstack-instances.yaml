#!/usr/bin/env ansible-playbook
---

# This playbook assumes an rc file has been sourced

- name: Setup cloud instances then make DNS records for them in CloudFlare
  hosts: localhost
  vars:
    # change if required or override at runtime using --extra-vars
    ssh_public_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    # dig lookup requires dnspython
    restricted_cidr_range: "{{ lookup('dig', 'myip.opendns.com', '@resolver1.opendns.com') + '/32' | default('0.0.0.0/0', true) }}"
    # change as required
    image: ubuntu-14.04-x86_64
    router_name: example-router
    private_net: example-net
    private_subnet: example-subnet
    key_name: example-key
    flavor: c1.c1r1
    subnet_first_octets: 10.0.0
    # instance configuration
    instances:
      - instance_name: web01
        instance_group: webservers
        instance_security_group: webservers-sg
      - instance_name: web02
        instance_group: webservers
        instance_security_group: webservers-sg
      - instance_name: web03
        instance_group: webservers
        instance_security_group: webservers-sg
      - instance_name: app01
        instance_group: appservers
        instance_security_group: appservers-sg
      - instance_name: app02
        instance_group: appservers
        instance_security_group: appservers-sg
      - instance_name: app03
        instance_group: appservers
        instance_security_group: appservers-sg
    # security group configuration
    security_groups:
      - security_group_name: webservers-sg
        security_group_description: "Security Group for Web Servers"
        rules:
        - port_range_max: 22
          port_range_min: 22
          remote_ip_prefix: "{{ restricted_cidr_range }}"
        - port_range_max: 80
          port_range_min: 80
          remote_ip_prefix: 0.0.0.0/0
        - port_range_max: 433
          port_range_min: 433
          remote_ip_prefix: 0.0.0.0/0
      - security_group_name: appservers-sg
        security_group_description: "Security Group for Application Servers"
        rules:
        - port_range_max: 22
          port_range_min: 22
          remote_ip_prefix: "{{ restricted_cidr_range }}"
        - port_range_max: 80
          port_range_min: 80
          remote_ip_prefix: "{{ restricted_cidr_range }}"
    # no changes required after this
    region: "{{ lookup('env','OS_REGION_NAME') }}"
    nameservers:
      nz-por-1:
        [202.78.247.197, 202.78.247.198, 202.78.247.199]
      nz_wlg_2:
        [202.78.240.213, 202.78.240.214, 202.78.240.215]
      nz-hlz-1:
        [202.78.244.85, 202.78.244.86, 202.78.244.87]
    # CloudFlare configuration:
    cf_zone: "{{ lookup('env','CF_ZONE') }}"
    cf_account_email: "{{ lookup('env','CF_ACCOUNT_EMAIL') }}"
    cf_account_api_token: "{{ lookup('env','CF_ACCOUNT_API_TOKEN') }}"

  tasks:
    - name: Connect to Catalyst Cloud
      os_auth:

    - name: Create a network
      os_network:
        state: present
        name: "{{ private_net }}"

    - name: Create a subnet in {{ region }}
      os_subnet:
        state: present
        name: "{{ private_subnet }}"
        network_name: "{{ private_net }}"
        cidr: "{{ subnet_first_octets }}.0/24"
        dns_nameservers: "{{ nameservers[region] }}"
        allocation_pool_start: "{{ subnet_first_octets }}.10"
        allocation_pool_end: "{{ subnet_first_octets }}.200"

    - name: Create a router
      os_router:
        state: present
        name: "{{ router_name }}"
        network: public-net
        interfaces:
          - "{{ private_subnet }}"

    - name: Create the security groups
      os_security_group:
        state: present
        name: "{{ item.security_group_name }}"
        description: "{{ item.security_group_description }}."
      with_items: "{{ security_groups }}"

    - name: Create the security group rules
      os_security_group_rule:
        state: present
        security_group: "{{ item.0.security_group_name }}"
        protocol: tcp
        port_range_min: "{{ item.1.port_range_min }}"
        port_range_max: "{{ item.1.port_range_max }}"
        remote_ip_prefix: "{{ item.1.remote_ip_prefix }}"
      with_subelements:
        - "{{ security_groups }}"
        - rules

    - name: Import an SSH keypair
      os_keypair:
        state: present
        name: "{{ key_name }}"
        public_key_file: "{{ ssh_public_key }}"

    - name: Create compute instances
      os_server:
        state: present
        name: "{{ item.instance_name }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ private_net }}"
        security_groups: "default,{{ item.instance_security_group }}"
      with_items: "{{ instances }}"

    - name: Assign a floating IP
      os_floating_ip:
        server: "{{ item.instance_name }}"
      register: floating_ip_info
      with_items: "{{ instances }}"

# annoyingly verbose debug output
#    - name: Output floating IPs
#      debug:
#        msg: "got floating ip {{ item.floating_ip.floating_ip_address }} for {{ item.item.instance_name }}"
#      with_items: "{{ floating_ip_info.results }}"

    - name: Create the CloudFlare DNS records
      cloudflare_dns:
        zone: "{{ cf_zone }}"
        record: "{{ item.item.instance_name }}"
        type: A
        value: "{{ item.floating_ip.floating_ip_address }}"
        account_email: "{{ cf_account_email }}"
        account_api_token: "{{ cf_account_api_token }}"
      with_items: "{{ floating_ip_info.results }}"

#!/usr/bin/env ansible-playbook
---

# This playbook assumes an openstack rc file has been sourced

- name: Deploy three networked host machines as swarm nodes
  hosts: localhost
  vars:
    # optional suffix to namespace resources
    suffix: ""
    # change if required or override at runtime using --extra-vars
    ssh_public_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    # dig lookup requires dnspython
    ssh_remote_cidr: "{{ lookup('dig', 'myip.opendns.com', '@resolver1.opendns.com') + '/32' | default('0.0.0.0/0', true) }}"
    image: ubuntu-16.04-x86_64
    private_subnet_name: "swarm-subnet{{ suffix }}"
    keypair_name: "swarm-key{{ suffix }}"
    router_name: "swarm-router{{ suffix }}"
    private_network_name: "swarm-net{{ suffix }}"
    security_group_name: "swarm-sg{{ suffix }}"
    flavor: c1.c1r1
    subnet_first_octets: 192.168.99
    # instance configuration
    instances:
      manager1:
        instance_name: "manager1{{ suffix }}"
        instance_group: "swarm-managers{{ suffix }}"
      worker1:
        instance_name: "worker1{{ suffix }}"
        instance_group: "swarm-workers{{ suffix }}"
      worker2:
        instance_name: "worker2{{ suffix }}"
        instance_group: "swarm-workers{{ suffix }}"
    # no changes required after this
    region: "{{ lookup('env','OS_REGION_NAME') }}"
    nameservers:
      nz-por-1:
        [202.78.247.197, 202.78.247.198, 202.78.247.199]
      nz_wlg_2:
        [202.78.240.213, 202.78.240.214, 202.78.240.215]
      nz-hlz-1:
        [202.78.244.85, 202.78.244.86, 202.78.244.87]

  tasks:
    - name: Connect to the Catalyst Cloud
      os_auth:

    - name: Create a network
      os_network:
        state: present
        name: "{{ private_network_name }}"

    - name: Create a subnet in {{ region }}
      os_subnet:
        state: present
        name: "{{ private_subnet_name }}"
        network_name: "{{ private_network_name }}"
        cidr: "{{ subnet_first_octets }}.0/24"
        dns_nameservers: "{{ nameservers[region] }}"
        allocation_pool_start: "{{ subnet_first_octets }}.98"
        allocation_pool_end: "{{ subnet_first_octets }}.200"

    - name: Create a router
      os_router:
        state: present
        name: "{{ router_name }}"
        network: public-net
        interfaces:
          - "{{ private_subnet_name }}"

    - name: "Create the {{ security_group_name }} security group"
      os_security_group:
        state: present
        name: "{{ security_group_name }}"
        description: Network access for the example instance.

    - name: Create a security group rule for SSH access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ ssh_remote_cidr }}"

    - name: Create a security group rule for vote app access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 5000
        port_range_max: 5000
        remote_ip_prefix: "{{ ssh_remote_cidr }}"

    - name: Create a security group rule for vote result app access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 5001
        port_range_max: 5001
        remote_ip_prefix: "{{ ssh_remote_cidr }}"

    - name: Create a security group rule for visualiser
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 8080
        port_range_max: 8080
        remote_ip_prefix: "{{ ssh_remote_cidr }}"

    - name: Import an SSH keypair
      os_keypair:
        state: present
        name: "{{ keypair_name }}"
        public_key_file: "{{ ssh_public_key }}"

    - name: Create swarm node compute instances
      os_server:
        state: present
        name: "{{ item.value.instance_name }}"
        image: "{{ image }}"
        key_name: "{{ keypair_name }}"
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ private_network_name }}"
        security_groups: "default,{{ security_group_name }}"
      with_dict: "{{ instances }}"

    - name: Assign a floating IP
      os_floating_ip:
        server: "{{ item.value.instance_name }}"
      register: floating_ip_info
      with_dict: "{{ instances }}"

    - name: Debugging statement
      debug:
        msg: "floating_ip_info {{ floating_ip_info.results[0].item.value.instance_name }}"

    - name: Append fixed_ip_address to instances
      set_fact:
        instances: "{{instances|combine( { item.item.key: { 'instance_fixed_ip': item.floating_ip.fixed_ip_address } }, recursive=True )}}"
      changed_when: true
      with_items: "{{ floating_ip_info.results }}"

    - name: Append floating_ip_address to instances
      set_fact:
        instances: "{{instances|combine( { item.item.key: { 'instance_floating_ip': item.floating_ip.floating_ip_address } }, recursive=True )}}"
      changed_when: true
      with_items: "{{ floating_ip_info.results }}"

    - name: Wait for SSH to come up on instances
      wait_for:
        host: "{{ item.value.instance_floating_ip }}"
        port: 22
      with_dict: "{{ instances }}"

    - name: Remove floating ip from known hosts
      known_hosts:
        name: "{{ item.value.instance_floating_ip }}"
        state: absent
      with_dict: "{{ instances }}"

    - name: Add newly created hosts to groups
      add_host:
        name: "{{ item.value.instance_floating_ip }}"
        groups: "{{ item.value.instance_group }},swarm-nodes"
        ansible_user: ubuntu
        instance_name: "{{ item.value.instance_name }}"
        instances: "{{ instances }}"
      with_dict: "{{ instances }}"

    - name: Add newly created hosts to local ~/.ssh/config
      blockinfile:
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ item.value.instance_name }}
              Hostname {{ item.value.instance_floating_ip }}
              User ubuntu

        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.value.instance_name }} docker swarm node"
      with_dict: "{{ instances }}"

    - name: Add voting.app to /etc/hosts
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ floating_ip_info.results[0].floating_ip.floating_ip_address }} voting.app
        marker: "# {mark} ANSIBLE MANAGED BLOCK for docker voting.app"


- name: Install python on swarm nodes
  hosts: swarm-nodes
  gather_facts: false
  become: yes
  tasks:
    - raw: sudo apt-get update

    - raw: which python || sudo apt-get install -y python-minimal && echo 'installed'
      register: python
      changed_when: python.stdout == 'installed'

- name: Setup docker community edition on compute instances
  hosts: swarm-nodes
  become: yes
  become_method: sudo
  tasks:
    - name: Add all instances to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "{{ item.value.instance_fixed_ip }} {{ item.value.instance_name }}"
      with_dict: "{{ instances }}"

    - name: Apt dist upgrade
      apt:
        upgrade: dist
        autoremove: yes

    - name: Install packages required for docker
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - apt-transport-https
        - ca-certificates
        - "linux-image-extra-{{ ansible_kernel }}"
        - linux-image-extra-virtual

    - name: Add Dockers official GPG key
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: present


    - name: Update apt cache
      apt:
        update_cache: yes


    - name: Add repo for Docker CE
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
        state: present

    - name: Install docker community edition
      apt:
        name: docker-ce
        state: latest
      notify:
        - Start docker

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        append: yes
        groups: docker

  handlers:
    - name: Start docker
      service:
        name: docker
        state: started

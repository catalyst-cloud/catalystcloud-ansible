cat <<EOF > create_loadbalancer_playbook.yaml
#!/usr/bin/env ansible-playbook
#
# This playbook works in Ansible 2.7.
#
# This playbook creates an instance running a simple webserver listening on
# port 80 and add it to a load balancer. A floating ip is created and associated
# with the load balancer automatically. The floating ip address can be found
# in the `public_vip_address` field of the final output.
#
# Please refer to https://docs.ansible.com/ansible/devel/modules/os_loadbalancer_module.html#os-loadbalancer-module
# for more detailed information about os_loadbalancer ansible module usage.
#
# Usage:
# $ source openrc
# $ ansible-playbook create_loadbalancer_playbook.yaml -e "vm_name=lingxian_webserver \
#     image=ubuntu-14.04-x86_64 \
#     network=lingxian_net \
#     kaypair=lingxian_pc \
#     flavor=c1.c1r1 \
#     security_groups=lingxian_group \
#     lb_name=lingxian_lb \
#     vip_subnet=lingxian_subnet"
#
---
- name: Create loadbalancer and add a simple webserver
  hosts: localhost

  vars:
    vm_name: lingxian_webserver
    image: ubuntu-14.04-x86_64
    flavor: c1.c1r1
    network: lingxian_net
    kaypair: lingxian_pc
    security_groups:
      - lingxian_group
    lb_name: lingxian_lb
    vip_subnet: lingxian_subnet
    public_network: public-net

  tasks:
    - name: Create a simple webserver
      os_server:
        name: "{{ vm_name }}"
        state: present
        auto_ip: false
        flavor: "{{ flavor }}"
        image: "{{ image }}"
        key_name: "{{ kaypair }}"
        network: "{{ network }}"
        security_groups: "{{ security_groups }}"
        config_drive: true
        userdata: |
          {%- raw -%}#!/usr/bin/python
          from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
          import time
          PORT_NUMBER = 80
          class myHandler(BaseHTTPRequestHandler):
              def do_GET(self):
                  self.send_response(200)
                  self.send_header('Content-type','text/html')
                  self.end_headers()
                  res_content = "Hello %s:%s - %s\n" % (self.client_address[0], self.client_address[1], time.strftime("%H:%M:%S", time.gmtime()))
                  self.wfile.write(res_content)
                  return
          try:
              server = HTTPServer(('', PORT_NUMBER), myHandler)
              print 'Started httpserver on port ' , PORT_NUMBER
              server.serve_forever()
          except KeyboardInterrupt:
              print 'shutting down the web server...'
              server.socket.close()
          {% endraw %}

    - name: Gather facts about webserver
      os_server_facts:
        server: "{{ vm_name }}"

    - name: Create load balancer
      os_loadbalancer:
        name: "{{ lb_name }}"
        state: present
        vip_subnet: "{{ vip_subnet }}"
        auto_public_ip: yes
        public_network: "{{ public_network }}"
        listeners:
          - name: test_80
            protocol: TCP
            protocol_port: 80
            pool:
              name: test_80_pool
              protocol: TCP
              members:
                - name: test_webserver
                  address: "{{ openstack_servers[0] | json_query(query) }}"
                  protocol_port: 80
                  subnet: lingxian_subnet
        wait: yes
        timeout: 600
      vars:
        query: 'addresses.{{ network }}[?"OS-EXT-IPS:type"==`fixed`].addr | [0]'
      register: lb_info

    - name: Print load balancer information
      debug: var=lb_info
EOF